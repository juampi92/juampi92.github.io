<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[juampi92's Blog]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="https://juampi92.github.io//"/>
  <updated>2015-08-11T14:39:38.000Z</updated>
  <id>https://juampi92.github.io//</id>
  
  <author>
    <name><![CDATA[Juan Pablo Barreto]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Ok, let's go]]></title>
    <link href="https://juampi92.github.io/2015/08/10/Ok-let-s-go/"/>
    <id>https://juampi92.github.io/2015/08/10/Ok-let-s-go/</id>
    <published>2015-08-10T22:15:23.000Z</published>
    <updated>2015-08-11T14:39:38.000Z</updated>
    <content type="html"><![CDATA[<p>As the title says quoting the famous Counter-Strike radio sound, it’s time to reboot this Blog. I’m going to pick up where I left off, but staying productive and dedicated to the blog. I’m (kind of) sorting my life now, so I’m trying to incorporate blogging into my new routine; let me explain.</p>
<a id="more"></a>
<p>Last week, I quit my job. It might have been a risky move, but I did it for all the right reasons. I don’t wanna sound like a spoiled kid, but I wasn’t enjoying my job anymore. It’s not that I hate what I do (I love what I do), but it just didn’t feel right. Maybe it was the company, maybe the project, or maybe my position inside the company/project that were keeping me from working as I’d like to work: motivated.</p>
<p>So now with all this free time, I’ve decided to start a journey. A knowledge journey among other things, and focus on what I like the most: experiments, tools, frameworks, learning and javascript, of course.  As I said before, I love the idea of a blog: it keeps my thoughts organized, and it preserves them for future reference. It’s also like a bragging resume, but that’s the least important feature, so I’m committing myself to blogging.</p>
<p>I’ve started using this awesome theme <a href="https://github.com/LouisBarranqueiro/tranquilpeak-hexo-theme" target="_blank" rel="external">tranquilpeak</a>, and I’ve been loving it ever since. One of the many features it introduces is thumbnail and cover images for each post, so I’ve also committed myself to add an image (if they were taken by me, better) to every post, and trying to make it related to the topic discussed, if possible.</p>
<p>As we all know, no one possesses a perfect memory, so lately I’ve been using a tool for sorting my thoughts and ideas, and I’d also like to share this, cause everybody should make a habit out of writing down every idea worth doing. And for that, I leave you <a href="https://workflowy.com/invite/2f57cc47.emlx" target="_blank" rel="external">WorkFlowy</a>. I’m still evaluating the tool, but so far it has been of great help.</p>
<p>I’d better get started then!<br>See you in the next post!</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>As the title says quoting the famous Counter-Strike radio sound, it’s time to reboot this Blog. I’m going to pick up where I left off, but staying productive and dedicated to the blog. I’m (kind of) sorting my life now, so I’m trying to incorporate blogging into my new routine; let me explain.</p>]]>
    
    </summary>
    
      <category term="blogs" scheme="https://juampi92.github.io/tags/blogs/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Google Charts Hexo-Tag Plugin]]></title>
    <link href="https://juampi92.github.io/2015/06/02/hexo-plugin-googlecharts/"/>
    <id>https://juampi92.github.io/2015/06/02/hexo-plugin-googlecharts/</id>
    <published>2015-06-03T00:09:02.000Z</published>
    <updated>2015-08-04T23:43:07.466Z</updated>
    <content type="html"><![CDATA[<p>Hello! This post is for demonstration purposes only. The idea is to show working examples of the new plugin I’ve made for embedding Google Dynamic Charts into your Hexo blog. It’s a pretty straight forward tag plugin.</p>
<a id="more"></a>
<p>Feel free to fork it! <a href="https://github.com/juampi92/hexo-tag-googlecharts" target="_blank" rel="external">hexo-tag-googlecharts</a></p>
<p>Instructions and more are in the Readme of the repository.</p>
<h2 id="Geographic_Chart_Comparison">Geographic Chart Comparison</h2><p>Chart <code>GeoChart</code><br><div id="googleChart838"></div>
<script>
  if (!window.google) {
    alert('You need to include the script //google.com/jsapi on your template');
    throw 'Google JS API is needed';
  } else {
    (function() {
      google.load('visualization', '1.0', {'packages': ["corechart","table","geochart"]});
      google.setOnLoadCallback(function() {
        (new google.visualization.GeoChart(document.getElementById("googleChart838"))).draw(google.visualization.arrayToDataTable([['City', 'Population', 'Area'],['Rome', 2761477, 1285.31],['Milan', 1324110, 181.76],['Naples', 959574, 117.27],['Turin', 907563, 130.17],['Palermo', 655875, 158.9],['Genoa', 607906, 243.60],['Bologna', 380181, 140.7],['Florence', 371282, 102.41],['Fiumicino', 67370, 213.44],['Anzio', 52192, 43.43],['Ciampino', 38262, 11]]),{"region":"IT","displayMode":"markers","colorAxis":{"colors":["green","blue"]},"title":"Geographic Chart Comparison","width":"900","height":"500"});
      });
    })();
  }
</script></p>
<figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;% googlecharts GeoChart 900 500 %&#125;</span><br><span class="line">  Geographic Chart Comparison</span><br><span class="line">  &#123;"region": "IT", "displayMode": "markers", "colorAxis": &#123;"colors": ["green", "blue"]&#125; &#125;</span><br><span class="line">  'City', 'Population', 'Area'</span><br><span class="line">  'Rome', 2761477, 1285.31</span><br><span class="line">  'Milan', 1324110, 181.76</span><br><span class="line">  'Naples', 959574, 117.27</span><br><span class="line">  'Turin', 907563, 130.17</span><br><span class="line">  'Palermo', 655875, 158.9</span><br><span class="line">  'Genoa', 607906, 243.60</span><br><span class="line">&#123;% endgooglecharts %&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Lengths_of_dinosaurs,_in_meters">Lengths of dinosaurs, in meters</h2><p>Chart <code>Histogram</code><br><div id="googleChart3309"></div>
<script>
  if (!window.google) {
    alert('You need to include the script //google.com/jsapi on your template');
    throw 'Google JS API is needed';
  } else {
    (function() {
      google.load('visualization', '1.0', {'packages': ["corechart","table"]});
      google.setOnLoadCallback(function() {
        (new google.visualization.Histogram(document.getElementById("googleChart3309"))).draw(google.visualization.arrayToDataTable([['Dinosaur', 'Length'],['Acrocanthosaurus (top-spined lizard)', 12.2],['Albertosaurus (Alberta lizard)', 9.1],['Allosaurus (other lizard)', 12.2],['Apatosaurus (deceptive lizard)', 22.9],['Archaeopteryx (ancient wing)', 0.9],['Argentinosaurus (Argentina lizard)', 36.6],['Baryonyx (heavy claws)', 9.1],['Brachiosaurus (arm lizard)', 30.5],['Ceratosaurus (horned lizard)', 6.1 ],['Coelophysis (hollow form)', 2.7],['Compsognathus (elegant jaw)', 0.9],['Deinonychus (terrible claw)', 2.7],['Diplodocus (double beam)', 27.1],['Dromicelomimus (emu mimic)', 3.4],['Gallimimus (fowl mimic)', 5.5],['Mamenchisaurus (Mamenchi lizard)', 21.0],['Megalosaurus (big lizard)', 7.9],['Microvenator (small hunter)', 1.2],['Ornithomimus (bird mimic)', 4.6],['Oviraptor (egg robber)', 1.5],['Plateosaurus (flat lizard)', 7.9],['Sauronithoides (narrow-clawed lizard)', 2.0],['Seismosaurus (tremor lizard)', 45.7],['Spinosaurus (spiny lizard)', 12.2],['Supersaurus (super lizard)', 30.5],['Tyrannosaurus (tyrant lizard)', 15.2],['Ultrasaurus (ultra lizard)', 30.5],['Velociraptor (swift robber)', 1.8]]),{"legend":{"position":"none"},"title":"Lengths of dinosaurs, in meters","width":"900","height":"500"});
      });
    })();
  }
</script></p>
<figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% googlecharts Histogram 900 500 %&#125;</span><br><span class="line">  Lengths of dinosaurs, in meters</span><br><span class="line">  &#123;"legend": &#123; "position": "none" &#125;&#125;</span><br><span class="line">  'Dinosaur', 'Length'</span><br><span class="line">  'Acrocanthosaurus (top-spined lizard)', 12.2</span><br><span class="line">  'Albertosaurus (Alberta lizard)', 9.1</span><br><span class="line">  'Allosaurus (other lizard)', 12.2</span><br><span class="line">  'Apatosaurus (deceptive lizard)', 22.9</span><br><span class="line">  'Archaeopteryx (ancient wing)', 0.9</span><br><span class="line">&#123;% endgooglecharts %&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Correlation_between_life_expectancy,_fertility_rate_and_population_of_some_world_countries_(2010)">Correlation between life expectancy, fertility rate and population of some world countries (2010)</h2><p>Chart <code>BubbleChart</code><br><div id="googleChart3937"></div>
<script>
  if (!window.google) {
    alert('You need to include the script //google.com/jsapi on your template');
    throw 'Google JS API is needed';
  } else {
    (function() {
      google.load('visualization', '1.0', {'packages': ["corechart","table"]});
      google.setOnLoadCallback(function() {
        (new google.visualization.BubbleChart(document.getElementById("googleChart3937"))).draw(google.visualization.arrayToDataTable([['ID', 'Life Expectancy', 'Fertility Rate', 'Region', 'Population'],['CAN', 80.66, 1.67, 'North America', 33739900],['DEU', 79.84, 1.36, 'Europe', 81902307],['DNK', 78.6, 1.84, 'Europe', 5523095],['EGY', 72.73, 2.78, 'Middle East', 79716203],['GBR', 80.05, 2, 'Europe', 61801570],['IRN', 72.49, 1.7, 'Middle East', 73137148],['IRQ', 68.09, 4.77, 'Middle East', 31090763],['ISR', 81.55, 2.96, 'Middle East', 7485600],['RUS', 68.6, 1.54, 'Europe', 141850000],['USA', 78.09, 2.05, 'North America', 307007000]]),{"hAxis":{"title":"Life Expectancy"},"vAxis":{"title":"Fertility Rate"},"bubble":{"textStyle":{"fontSize":11}},"title":"Correlation between life expectancy, fertility rate and population of some world countries (2010)","width":"900","height":"500"});
      });
    })();
  }
</script></p>
<figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% googlecharts BubbleChart 900 500 %&#125;</span><br><span class="line">  Correlation between life expectancy, fertility rate and population of some world countries (2010)</span><br><span class="line">  &#123;"hAxis": &#123;"title": "Life Expectancy"&#125;, "vAxis": &#123;"title": "Fertility Rate"&#125;,"bubble":&#123;"textStyle": &#123;"fontSize": 11&#125;&#125;&#125;</span><br><span class="line">  'ID', 'Life Expectancy', 'Fertility Rate', 'Region', 'Population'</span><br><span class="line">  'CAN', 80.66, 1.67, 'North America', 33739900</span><br><span class="line">  'DEU', 79.84, 1.36, 'Europe', 81902307</span><br><span class="line">  'DNK', 78.6, 1.84, 'Europe', 5523095</span><br><span class="line">  'EGY', 72.73, 2.78, 'Middle East', 79716203</span><br><span class="line">  'GBR', 80.05, 2, 'Europe', 61801570</span><br><span class="line">&#123;% endgooglecharts %&#125;</span><br></pre></td></tr></table></figure>
<h2 id="BarChart_Example">BarChart Example</h2><p>Chart <code>BarChart</code><br><div id="googleChart4205"></div>
<script>
  if (!window.google) {
    alert('You need to include the script //google.com/jsapi on your template');
    throw 'Google JS API is needed';
  } else {
    (function() {
      google.load('visualization', '1.0', {'packages': ["corechart","table"]});
      google.setOnLoadCallback(function() {
        (new google.visualization.BarChart(document.getElementById("googleChart4205"))).draw(google.visualization.arrayToDataTable([['Genre', 'Fantasy & Sci Fi', 'Romance', 'Mystery/Crime', 'General', 'Western', 'Literature'],['2010', 10, 24, 20, 32, 18, 5],['2020', 16, 22, 23, 30, 16, 9],['2030', 28, 19, 29, 30, 12, 13]]),{"legend":{"position":"top","maxLines":3},"bar":{"groupWidth":"75%"},"isStacked":true,"title":"BarChart Example","width":"900","height":"500"});
      });
    })();
  }
</script></p>
<figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% googlecharts BarChart 900 500 %&#125;</span><br><span class="line">  BarChart Example</span><br><span class="line">  &#123;"legend": &#123; "position": "top", "maxLines": 3 &#125;,"bar": &#123; "groupWidth": "75%" &#125;,"isStacked": true&#125;</span><br><span class="line">  'Genre', 'Fantasy &amp; Sci Fi', 'Romance', 'Mystery/Crime', 'General', 'Western', 'Literature'</span><br><span class="line">  '2010', 10, 24, 20, 32, 18, 5</span><br><span class="line">  '2020', 16, 22, 23, 30, 16, 9</span><br><span class="line">  '2030', 28, 19, 29, 30, 12, 13</span><br><span class="line">&#123;% endgooglecharts %&#125;</span><br></pre></td></tr></table></figure>
<h2 id="My_Daily_Activities">My Daily Activities</h2><p>Chart <code>PieChart</code><br><div id="googleChart1680"></div>
<script>
  if (!window.google) {
    alert('You need to include the script //google.com/jsapi on your template');
    throw 'Google JS API is needed';
  } else {
    (function() {
      google.load('visualization', '1.0', {'packages': ["corechart","table"]});
      google.setOnLoadCallback(function() {
        (new google.visualization.PieChart(document.getElementById("googleChart1680"))).draw(google.visualization.arrayToDataTable([['Task', 'Hours per Day'],['Work', 11],['Eat', 2],['Commute', 2],['Watch TV', 2],['Sleep', 7]]),{"is3D":true,"title":"My Daily Activities","width":"900","height":"500"});
      });
    })();
  }
</script></p>
<figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% googlecharts PieChart 900 500 %&#125;</span><br><span class="line">  My Daily Activities</span><br><span class="line">  &#123;"is3D": true&#125;</span><br><span class="line">  'Task', 'Hours per Day'</span><br><span class="line">  'Work', 11</span><br><span class="line">  'Eat', 2</span><br><span class="line">  'Commute', 2</span><br><span class="line">  'Watch TV', 2</span><br><span class="line">  'Sleep', 7</span><br><span class="line">&#123;% endgooglecharts %&#125;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p>Hello! This post is for demonstration purposes only. The idea is to show working examples of the new plugin I’ve made for embedding Google Dynamic Charts into your Hexo blog. It’s a pretty straight forward tag plugin.</p>]]>
    
    </summary>
    
      <category term="blogs" scheme="https://juampi92.github.io/tags/blogs/"/>
    
      <category term="plugins" scheme="https://juampi92.github.io/tags/plugins/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Binary File Manipulation in JS]]></title>
    <link href="https://juampi92.github.io/2015/05/30/binary-file-manipulation/"/>
    <id>https://juampi92.github.io/2015/05/30/binary-file-manipulation/</id>
    <published>2015-05-30T04:48:37.000Z</published>
    <updated>2015-08-04T23:45:58.011Z</updated>
    <content type="html"><![CDATA[<p>Hi guys! Today I bring you a nerd experiment. Almost 9 months ago, I was building a javascript program that would load a binary file and do stuff with it (maybe someday I’ll explain it more in depth), so I made back then a class for handling structs, like on C++. So the idea was to describe a typed structure specifying it’s properties, each with a type, so then when you give it a binary array buffer, it’ll create on memory the given structure.</p>
<a id="more"></a>
<p>So the class worked fine, and I felt like I should share it with the world, so I made a repository on github with this <a href="https://github.com/juampi92/TypedStruct.js" target="_blank" rel="external">TypedStruct.js</a>.</p>
<p>Todays blog is about a new perspective that I have for this project. My idea is to take this small library to the next level, trying to beat it’s performance the best I can (and the language allows me), and then compare it with the libraries that exist out there.</p>
<p>To do this, I’ll have to set up a performance test scenario, and run different benchmarks comparing different solutions and try to take notes on it’s improvements or failures to make a great performing library.</p>
<h3 id="Setup">Setup</h3><p>I’ve found a couple of benchmark libraries, like <a href="https://github.com/bestiejs/benchmark.js" target="_blank" rel="external">Benchmark.js</a> but for this purpose, I’m gonna benchmark using the console and my own tests.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.time(<span class="string">'TypedStruct: Simple Structure'</span>);</span><br><span class="line"><span class="comment">// Heavy stuff here (with a for loop to test iterations)</span></span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">'TypedStruct: Simple Structure'</span>);</span><br></pre></td></tr></table></figure>
<p>The big benchmark test will be to read a full binary file full of structures, using this improved version, and some other library.</p>
<p>Now I’m gonna set the Unit Tests to help me build this library. Sometimes is way better to test your app/library using the Unit Tests right when developing, because you control your scenario and know what to test, instead of making a small simulation that would end up in the trash. Besides, with Mocha and Shouldjs it’s really easy to create and run your test cases, so it’s a win win scenario.</p>
<h3 id="Improvements">Improvements</h3><p>Fist, I’m changing the API from the initial (and old) version. Instead of using and array, I’m going to use an object (much more descriptive), and instead of saving the raw structure and then parsing it, I’m gonna build a Structure Type, that will create structures faster.<br>So now it takes more time to create new structures, but it takes much less time (lets hope) to convert to binary.</p>
<h5 id="Building_Structures">Building Structures</h5><p>So how do I optimize the parsing process? Creating functions that already know what to do. So that’s what I did. When you create a structure now, the builder takes the guide (the English description of the structure, using types like int instead of <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getInt32" target="_blank" rel="external">Int32</a>, etc) and creates it’s real structure. For each property, it looks for it’s structure on the list of structures, and returns the function that builds it. After doing this internal structure, it returns a function to create itself.</p>
<p>Here’s an example:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">point: &#123;</span><br><span class="line">  <span class="string">'x'</span>: <span class="string">'int'</span>,</span><br><span class="line">  <span class="string">'y'</span>: <span class="string">'int'</span>,</span><br><span class="line">  <span class="string">'z'</span>: <span class="string">'int'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Is turned into<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">point: &#123;</span><br><span class="line">  <span class="string">'x'</span>: [<span class="built_in">Function</span> that creates an Int32],</span><br><span class="line">  <span class="string">'y'</span>: [<span class="built_in">Function</span> that creates an Int32],</span><br><span class="line">  <span class="string">'z'</span>: [<span class="built_in">Function</span> that creates an Int32]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>And this function returns a <code>[Function that creates a point]</code>.</p>
<p>This way, when actually parsing binary, we don’t have to go threw a pile of InstanceOf, isArray, or Ifs for that matter, we have the actual Function that will output our result.</p>
<p>As functions are objects, if instead of executing the function, we ask for it’s size property, we would get the byte size of the </p>
<p>To make this function lighter, it only takes one parameter, and it outputs the created structure. The input parameter is a DataViewCursor. It’s a common <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView" target="_blank" rel="external">DataView</a>, but it has a cursor to tell the current reading position, and it’s incremented internally whenever you parse a structure (unless you manually change it).</p>
<h5 id="Native_Types">Native Types</h5><p>Now as we demonstrated that the parsing process is recursive using custom functions for each structure, we have to talk about the root of the recursion: the native types.<br>The library initiates at first every native type, so then when you ask for the <code>int</code> type, it’s already loaded into the structs. This was made by binding the DataView methods into the output function. The DataView that receives as a argument is sent as context for the method that has cached.</p>
<p>It’s like this:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Native type</span></span><br><span class="line"><span class="keyword">var</span> nativeType = <span class="function"><span class="keyword">function</span>(<span class="params">size, method, dataViewCursor</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Save output of the cached method</span></span><br><span class="line">  <span class="keyword">var</span> out = method.call(dataViewCursor.dataView, dataViewCursor.cursor, littleEndian);</span><br><span class="line">  <span class="comment">// Increment the cursor of the dataview</span></span><br><span class="line">  dataViewCursor.incrementCursor(size);</span><br><span class="line">  <span class="comment">// return the cached output</span></span><br><span class="line">  <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Now to get a Int32 function generator is just<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> int32 = nativeType.bind(<span class="keyword">this</span>, <span class="number">4</span>, <span class="built_in">DataView</span>.prototype.getInt32);</span><br><span class="line"></span><br><span class="line"><span class="comment">// So now</span></span><br><span class="line"><span class="keyword">var</span> int = int32(DataViewCursor);</span><br></pre></td></tr></table></figure></p>
<p>will output an integer, based on the position of the DataViewCursor in that moment, and increment the cursor 4 bytes.</p>
<h5 id="Arrays">Arrays</h5><p>The arrays weren’t as complicated. When building a struct, we now ask it the property is a string, or an array. If it’s a string, it means we have to get the struct that matches that string, and if it’s an array, we have to do something else.</p>
<p>We now have, in the first element of the array, the type of the array we’re creating. And the rest of them are the dimensions. What I did here, is to make three cache functions for the first three dimensions, so it’s O(n3) complex when has three dimensions, but in a way that does not affect it’s performance as recursion would not do. If it has more than three dimensions, it’s calculated using recursion.</p>
<p>So the array cache method is pretty straight forward<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'3'</span>: <span class="function"><span class="keyword">function</span>(<span class="params">structure, x, y, z, dataViewCursor</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> out = [],</span><br><span class="line">    cursorx, cursory,</span><br><span class="line">    _x, _y, _z;</span><br><span class="line">  <span class="comment">// First x iteration</span></span><br><span class="line">  <span class="keyword">for</span> (_x = <span class="number">0</span>; _x &lt; x; _x++) &#123;</span><br><span class="line">    out[_x] = [];</span><br><span class="line">    cursorx = out[_x];</span><br><span class="line">    <span class="comment">// Second y iteration</span></span><br><span class="line">    <span class="keyword">for</span> (_y = <span class="number">0</span>; _y &lt; y; _y++) &#123;</span><br><span class="line">      cursorx[_y] = [];</span><br><span class="line">      cursory = cursorx[_y];</span><br><span class="line">      <span class="comment">// Third z iteration</span></span><br><span class="line">      <span class="keyword">for</span> (_z = <span class="number">0</span>; _z &lt; z; _z++) &#123;</span><br><span class="line">        cursory[_z] = structure(dataViewCursor);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>and we personalize this with a bind<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Having specified: [ 'int', 3, 3, 3 ]</span></span><br><span class="line"><span class="keyword">var</span> pr = propertiesArray;</span><br><span class="line"><span class="keyword">this</span>._arrays[<span class="number">3</span>].bind(<span class="keyword">this</span>, TypedStruct.getStruct(pr[<span class="number">0</span>]), pr[<span class="number">1</span>], pr[<span class="number">2</span>], pr[<span class="number">3</span>]);</span><br></pre></td></tr></table></figure></p>
<p>Notice that each loop has a cursor, that caches the array position, so there’s no <code>out[x][y][z] = ...</code></p>
<h3 id="Results">Results</h3><p>So after making this improvements, it was time to create a benchmark against <a href="https://github.com/vjeux/jParser" target="_blank" rel="external">jParser</a>, although I should have compared it with <a href="https://github.com/jDataView/jBinary" target="_blank" rel="external">jBinary</a> (and I will).</p>
<p>I made a small benchmark to test small point structure, and the results were pretty good. Depending on the iterations, the difference was </p>
<div id="googleChart5263"></div>
<script>
  if (!window.google) {
    alert('You need to include the script //google.com/jsapi on your template');
    throw 'Google JS API is needed';
  } else {
    (function() {
      google.load('visualization', '1.0', {'packages': ["corechart","table"]});
      google.setOnLoadCallback(function() {
        (new google.visualization.ColumnChart(document.getElementById("googleChart5263"))).draw(google.visualization.arrayToDataTable([['N° of Rounds','jParser','TypedStruct'],[1000,28,5],[5000,71,19],[10000,143,37],[20000,282,68]]),{"hAxis":{"title":"Number of Rounds","textStyle":{"bold":true,"italic":false},"titleTextStyle":{"fontSize":18,"bold":true,"italic":false}},"vAxis":{"title":"Time elapsed (ms)","textStyle":{"fontSize":15,"color":"#67001f","bold":false,"italic":false},"titleTextStyle":{"fontSize":15,"bold":true,"italic":false}},"title":"Benchmark performance comparison","width":"700","height":"400"});
      });
    })();
  }
</script>
<p>Clearly TypedStruct is faster, but I must recognize that jParser’s API is way better. It allows you to create the whole structure from inside the declaration, moving around the DataView and such, but that was not my goal for this library. I wanted it to be as fast as possible, because sometimes binary files are heavy, so taking a long time parsing it could affect your site in a bad way.</p>
<p>I don’t want to leave this thing unclosed, so I have a project in mind that will help me demonstrate this library working it’s full potential. Also for that project I’ll have to finish the string type.</p>
<p>So, if you spotted something wrong with my analysis, or just don’t get anything, feel free to leave me a comment!</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Hi guys! Today I bring you a nerd experiment. Almost 9 months ago, I was building a javascript program that would load a binary file and do stuff with it (maybe someday I’ll explain it more in depth), so I made back then a class for handling structs, like on C++. So the idea was to describe a typed structure specifying it’s properties, each with a type, so then when you give it a binary array buffer, it’ll create on memory the given structure.</p>]]>
    
    </summary>
    
      <category term="project" scheme="https://juampi92.github.io/tags/project/"/>
    
      <category term="research" scheme="https://juampi92.github.io/tags/research/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World!]]></title>
    <link href="https://juampi92.github.io/2015/05/16/hello-world/"/>
    <id>https://juampi92.github.io/2015/05/16/hello-world/</id>
    <published>2015-05-16T23:30:42.000Z</published>
    <updated>2015-08-04T23:28:20.524Z</updated>
    <content type="html"><![CDATA[<p>Hello Internet! It’s time to make a proper introduction into the blogging world. I’m Juan Pablo, a Web Developer studying Systems Engineering in Tandil, Argentina, and I like to mess around with technology. The main reason of this blog’s existence, is because I consider a blog an excellent way to keep track of any research, ideas and creations. By this I mean that using blogs as a documentation platform is extremely useful, not only for the reader, but for the creator itself. Documentation blogs help organize ideas and it increases commitment and dedication.</p>
<a id="more"></a>
<p>Here you can expect to see everything that I find interesting and fun enough to talk about and share. Like my nerd projects and ideas, and stuff involving fun apps, android, the raspberry pi, games, reviews, and even (why not?) talk about some hobbies of mine and what I enjoy besides the basic nerd stuff, so I hope you have a warm and comfortable stay.</p>
<h3 id="Enough_of_the_intro">Enough of the intro</h3><p>As this is the first blog post, I’m gonna talk about blogs. Back in the day, I used to make Wordpress blogs for friends to help their band or their business, but the truth is, I don’t really like those kind of blogs.<br>I have nothing against them, but the problem is when something simple and rarely modified becomes an active resource in someones computer. So there’s no point in having a dynamic blog, when you write once a week, and that’s why I consider statics blogs to be the right way to go.</p>
<p>I started researching, but I couldn’t find what I was looking for. First I came across Jekyll, which I guess it’s the first of it’s species, but it’s built on Ruby, which I don’t know and have no interest of knowing. So as I like (a lot) javascript, I figured that a similar software should exist in the npm world, and I found quite a few.</p>
<p>There were others too, but they were lacking something. So I did a couple things to pick a winner.<br>Fist check out the quantity of starts it’s github repo had. Then the amount of documentation for understanding the engine and for making new plugins, and of course the amount of plugins available for download. And finally, it’s user interface. They almost all use command line, which is what I’m looking for, but Metalsmith is not, but I guess I could create a command line interface if needed, so no big deal. What I’d like the blog to have is an admin interface (using plugins, of course, so that’s also needed)</p>
<h3 id="The_results">The results</h3><p><strong> <a href="https://www.docpad.org/" target="_blank" rel="external">Docpad</a></strong><br><strong> - Stars:</strong> 2,561<br><strong> - Plugins:</strong> Enough (193 npm matches) <a href="https://docpad.org/docs/plugins" target="_blank" rel="external">(list)</a><br><strong> - Admin UI:</strong> Yes! <a href="https://www.npmjs.com/package/docpad-plugin-minicms" target="_blank" rel="external">(minicms)</a></p>
<p><strong> <a href="http://harpjs.com/" target="_blank" rel="external">Harp</a></strong><br><strong> - Stars:</strong> 2,920<br><strong> - Plugins:</strong> No!<br><strong> - Admin UI:</strong> No</p>
<p><strong> <a href="http://www.metalsmith.io/" target="_blank" rel="external">metalsmith</a></strong><br><strong> - Stars:</strong> 3,362<br><strong> - Plugins:</strong> Yes.. not many, but yes <a href="http://www.metalsmith.io/#the-plugins" target="_blank" rel="external">(list)</a><br><strong> - Admin UI:</strong> Not found. It also does not have a command interface, so it’s just a Nodejs dependency.</p>
<p><strong> <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a></strong><br><strong> - Stars:</strong> 4,964<br><strong> - Plugins:</strong>  Not as many matches as docpad <a href="http://hexo.io/plugins/" target="_blank" rel="external">(list)</a><br><strong> - Admin UI:</strong> Yes! <a href="https://github.com/jaredly/hexo-admin" target="_blank" rel="external">(hexo-admin)</a> (I think it’s super indie, but I could fork it and help, and it’s made on React, so cool)</p>
<h3 id="And_the_winner_is…">And the winner is…</h3><p>So, what conclusion do we get from here? Definitely, as Harp has no plugin support, it’s ruled out. And then, metalsmith has really few documentation, and few plugins, so we are now between Hexo and Docpad.<br>Hexo has more stars on github, but docpad has also a (kind of) official UI and a ton of plugins…</p>
<p>So I decided to give Hexo a try. I’ve installed a pretty nice theme (<a href="https://github.com/LouisBarranqueiro/tranquilpeak-hexo-theme/" target="_blank" rel="external">tranquilpeak</a>) and I’ve tweaked it a little. </p>
<p>My future goal is to make a plugin for Hexo that turns your static blog into a static single page app/blog, and I have plans for forking the admin plugin and adding admin-like functionality.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Hello Internet! It’s time to make a proper introduction into the blogging world. I’m Juan Pablo, a Web Developer studying Systems Engineering in Tandil, Argentina, and I like to mess around with technology. The main reason of this blog’s existence, is because I consider a blog an excellent way to keep track of any research, ideas and creations. By this I mean that using blogs as a documentation platform is extremely useful, not only for the reader, but for the creator itself. Documentation blogs help organize ideas and it increases commitment and dedication.</p>]]>
    
    </summary>
    
      <category term="blogs" scheme="https://juampi92.github.io/tags/blogs/"/>
    
  </entry>
  
</feed>